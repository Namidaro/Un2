<controls:MetroWindow
    x:Class="Unicon2.Shell.Views.Shell"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="clr-namespace:Unicon2.Shell.Behaviors"
    xmlns:behaviours="http://metro.mahapps.com/winfx/xaml/shared"
    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dialogs="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
    xmlns:dockingManagerWindows="clr-namespace:Unicon2.Presentation.Infrastructure.ViewModels.DockingManagerWindows;assembly=Unicon2.Presentation.Infrastructure"
    xmlns:fluent="urn:fluent-ribbon"
    xmlns:fragmentInterfaces="clr-namespace:Unicon2.Presentation.Infrastructure.ViewModels.FragmentInterfaces;assembly=Unicon2.Presentation.Infrastructure"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:infrastructure="clr-namespace:Unicon2.Infrastructure;assembly=Unicon2.Infrastructure"
    xmlns:layoutHelpers="clr-namespace:Unicon2.SharedResources.LayoutHelpers;assembly=Unicon2.SharedResources"
    xmlns:lex="http://wpflocalizeextension.codeplex.com"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:mvvm="http://prismlibrary.com/"
    xmlns:services="clr-namespace:Unicon2.Shell.Services"
    xmlns:views="clr-namespace:Unicon2.Shell.Views"
    xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
    x:Name="MainWindow"
    Title="Unicon 2"
    Width="900"
    Height="600"
    dialogs:DialogParticipation.Register="{Binding}"
    lex:LocalizeDictionary.DesignCulture="ru-RU"
    lex:ResxLocalizationProvider.DefaultAssembly="Unicon2.Localization"
    lex:ResxLocalizationProvider.DefaultDictionary="Resources"
    mvvm:ViewModelLocator.AutoWireViewModel="True"
    GlowBrush="Black"
    ResizeMode="CanResizeWithGrip"
    SaveWindowPosition="True"
    ShowDialogsOverTitleBar="True"
    ShowSystemMenuOnRightClick="False"
    WindowButtonCommandsOverlayBehavior="Always"
    WindowState="Maximized"
    mc:Ignorable="d">

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <mvvm:InvokeCommandAction Command="{Binding OnClosingCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <controls:MetroWindow.Resources>
        <layoutHelpers:ActiveDocumentConverter x:Key="ActiveDocumentConverter" />
        <xcad:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />

        <Style TargetType="{x:Type fluent:RibbonTabItem}">
            <Setter Property="Background" Value="White" />
            <Setter Property="BorderBrush" Value="Transparent" />
        </Style>
    </controls:MetroWindow.Resources>

    <controls:MetroWindow.Flyouts>
        <controls:FlyoutsControl mvvm:RegionManager.RegionName="{x:Static infrastructure:ApplicationGlobalNames+ViewNames.DEVICE_EDITING_FLYOUT_REGION_NAME}">
            <views:ShellSettingsFlyOut
                x:Name="menuFlyOut"
                IsOpen="{Binding IsMenuFlyOutOpen, Mode=TwoWay}"
                IsPinned="False"
                Position="Left"
                Theme="Accent" />
        </controls:FlyoutsControl>
    </controls:MetroWindow.Flyouts>

    <controls:MetroWindow.LeftWindowCommands>
        <controls:WindowCommands>
            <ToggleButton Cursor="Hand" IsChecked="{Binding IsOpen, ElementName=menuFlyOut}">
                <Rectangle
                    Width="15"
                    Height="15"
                    Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Fill" Visual="{DynamicResource appbar_cog}" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </ToggleButton>
        </controls:WindowCommands>
    </controls:MetroWindow.LeftWindowCommands>

    <i:Interaction.Behaviors>
        <behaviours:BorderlessWindowBehavior />
    </i:Interaction.Behaviors>

    <Grid ZIndex="2">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <fluent:Ribbon x:Name="ribbon" Grid.Row="0">

            <fluent:Ribbon.Menu>
                <Grid>
                    <fluent:Backstage
                        Background="{DynamicResource HighlightBrush}"
                        Header="{lex:Loc Key=File}"
                        Visibility="Visible">
                        <fluent:BackstageTabControl>
                            <fluent:Button
                                Command="{Binding OpenProjectCommand}"
                                Header="{lex:Loc Key=OpenProject}"
                                KeyTip="S" />
                            <fluent:Button
                                Command="{Binding NewProjectCommand}"
                                Header="{lex:Loc Key=NewProject}"
                                KeyTip="S" />
                            <fluent:Button
                                Command="{Binding SaveProjectCommand}"
                                Header="{lex:Loc Key=Save}"
                                KeyTip="S" />
                            <fluent:Button
                                Command="{Binding SaveAsProjectCommand}"
                                Header="{lex:Loc Key=SaveAs}"
                                KeyTip="A" />

                            <fluent:SeparatorTabItem />

                            <fluent:BackstageTabItem Header="{lex:Loc Key=Information}" KeyTip="I">
                                <Label Content="Информация о программе" />
                            </fluent:BackstageTabItem>

                            <fluent:BackstageTabItem Header="{lex:Loc Key=LastOpened}" KeyTip="R">
                                <TabControl Margin="20,5,20,5">
                                    <fluent:SeparatorTabItem Header="Test1" />
                                    <TabItem Header="1" />
                                    <TabItem Header="2" />
                                    <TabItem Header="3" />
                                    <fluent:SeparatorTabItem Header="Test2" />
                                    <TabItem Header="4" />
                                </TabControl>
                            </fluent:BackstageTabItem>

                            <fluent:SeparatorTabItem />

                            <fluent:Button
                                Command="{Binding ExitCommand}"
                                Header="{lex:Loc Key=Exit}"
                                KeyTip="X" />
                        </fluent:BackstageTabControl>
                    </fluent:Backstage>
                </Grid>
            </fluent:Ribbon.Menu>

            <!--  дополнительные кнопочки справа (например кнопка показа/скрытия отдельных элементов меню)  -->

            <fluent:RibbonTabItem Margin="2" Header="{lex:Loc Key=Main}">
                <fluent:RibbonGroupBox Header="{lex:Loc Key=Device}" TabIndex="0">
                    <fluent:Button
                        x:Name="addDevice"
                        Command="{Binding NavigateToDeviceAddingCommand}"
                        CommandParameter="{x:Static infrastructure:ApplicationGlobalNames.ADDING_MODE}"
                        Header="{lex:Loc Key=Add}"
                        Size="Middle" />
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="{lex:Loc DeviceEditor}">
                    <fluent:Button
                        x:Name="openDeviceEditor"
                        Command="{Binding NavigateToDeviceEditorCommand}"
                        Header="{lex:Loc OpenDeviceEditor}"
                        Size="Middle" />
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="{lex:Loc Windows}">
                    <ItemsControl ItemsSource="{Binding AnchorableWindows}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="dockingManagerWindows:IAnchorableWindow">
                                <fluent:CheckBox IsChecked="{Binding IsVisible, Mode=TwoWay}" Size="Middle">
                                    <fluent:CheckBox.Header>
                                        <Grid>
                                            <lex:LocProxy Name="WindowTitleProxy" Source="{Binding WindowNameKey}" />
                                            <TextBlock Text="{Binding ElementName=WindowTitleProxy, Path=Result}" />
                                        </Grid>
                                    </fluent:CheckBox.Header>
                                </fluent:CheckBox>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="{lex:Loc Oscilloscope}">
                    <fluent:Button
                        x:Name="openOscillogram"
                        Command="{Binding OpenOscillogramCommand}"
                        Header="{lex:Loc OpenOscillogram}"
                        Size="Middle" />
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>

            <fluent:RibbonTabItem
                Margin="2"
                Header="{Binding ActiveFragmentViewModel.FragmentTitle}"
                KeyTip="H"
                Visibility="{Binding ActiveFragmentViewModel, TargetNullValue=Collapsed}">
                <i:Interaction.Behaviors>
                    <behaviors:DynamicRibbonTabItemBehavior TabItems="{Binding ActiveFragmentViewModel.FragmentViewModel.FragmentOptionsViewModel}" />
                </i:Interaction.Behaviors>
            </fluent:RibbonTabItem>
        </fluent:Ribbon>

        <xcad:DockingManager
            x:Name="DockingManager"
            Grid.Row="1"
            Grid.Column="0"
            VerticalAlignment="Stretch"
            ActiveContent="{Binding ActiveFragmentViewModel, Converter={StaticResource ActiveDocumentConverter}, Mode=TwoWay}"
            AllowMixedOrientation="True"
            AnchorableHeaderTemplate="{DynamicResource DockingWindowTitleDataTemplate}"
            AnchorableTitleTemplate="{DynamicResource DockingWindowTitleDataTemplate}"
            AnchorablesSource="{Binding AnchorableWindows}"
            DocumentHeaderTemplate="{DynamicResource DockingWindowTitleDataTemplate}"
            DocumentTitleTemplate="{DynamicResource DockingWindowTitleDataTemplate}"
            DocumentsSource="{Binding FragmentsOpenedCollection}">
            <xcad:DockingManager.Resources>
                <DataTemplate x:Key="DockingWindowTitleDataTemplate" DataType="xcad:LayoutContent">
                    <Grid>
                        <lex:LocProxy Name="titleProxy" Source="{Binding Path=Content.WindowNameKey}" />
                        <TextBlock
                            Margin="0"
                            VerticalAlignment="Center"
                            Text="{Binding ElementName=titleProxy, Path=Result, Converter={StaticResource IgnoringFailedLocalizationConverter}}" />
                    </Grid>
                </DataTemplate>

                <!--<SolidColorBrush x:Key="AvalonDock_ThemeMetro_BaseColor1" Color="White" />
                <SolidColorBrush x:Key="AvalonDock_ThemeMetro_BaseColor2" Color="Black" />
                <SolidColorBrush x:Key="AvalonDock_ThemeMetro_BaseColor3" Color="{DynamicResource AccentColor2}" />
                <SolidColorBrush x:Key="AvalonDock_ThemeMetro_BaseColor4" Color="{DynamicResource AccentColor}" />
                <SolidColorBrush x:Key="AvalonDock_ThemeMetro_BaseColor5" Color="#333333" />
                <SolidColorBrush x:Key="AvalonDock_ThemeMetro_BaseColor6" Color="#8C8E94" />
                <SolidColorBrush x:Key="AvalonDock_ThemeMetro_BaseColor7" Color="#EEEEEE" />-->

            </xcad:DockingManager.Resources>

            <xcad:DockingManager.Theme>
                <xcad:MetroTheme />
            </xcad:DockingManager.Theme>

            <xcad:DockingManager.LayoutUpdateStrategy>
                <services:LayoutInitializer />
            </xcad:DockingManager.LayoutUpdateStrategy>

            <xcad:DockingManager.LayoutItemTemplateSelector>
                <layoutHelpers:DockingManagerTemplateSelector>
                    <layoutHelpers:DockingManagerTemplateSelector.FragmentPaneTemplate>
                        <DataTemplate DataType="fragmentInterfaces:IFragmentPaneViewModel">
                            <ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Disabled">
                                <ContentControl Content="{Binding FragmentViewModel}">
                                    <ContentControl.ContentTemplateSelector>
                                        <layoutHelpers:FragmentsLayoutTemplateSelector />
                                    </ContentControl.ContentTemplateSelector>
                                </ContentControl>
                            </ScrollViewer>
                        </DataTemplate>
                    </layoutHelpers:DockingManagerTemplateSelector.FragmentPaneTemplate>
                </layoutHelpers:DockingManagerTemplateSelector>
            </xcad:DockingManager.LayoutItemTemplateSelector>

            <xcad:DockingManager.LayoutItemContainerStyleSelector>
                <layoutHelpers:PanesStyleSelector>
                    <layoutHelpers:PanesStyleSelector.BottomWindowStyle>
                        <Style TargetType="{x:Type xcad:LayoutAnchorableItem}">
                            <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}" />
                            <Setter Property="CanClose" Value="False" />
                            <Setter Property="CanHide" Value="False" />
                        </Style>
                    </layoutHelpers:PanesStyleSelector.BottomWindowStyle>
                    <layoutHelpers:PanesStyleSelector.LeftWindowStyle>
                        <Style TargetType="{x:Type xcad:LayoutAnchorableItem}">
                            <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}" />
                            <Setter Property="CanClose" Value="False" />
                            <Setter Property="CanHide" Value="False" />
                        </Style>
                    </layoutHelpers:PanesStyleSelector.LeftWindowStyle>
                    <layoutHelpers:PanesStyleSelector.ProjectPaneStyle>
                        <Style TargetType="{x:Type xcad:LayoutAnchorableItem}" />
                    </layoutHelpers:PanesStyleSelector.ProjectPaneStyle>
                    <layoutHelpers:PanesStyleSelector.FragmentsPaneStyle>
                        <Style TargetType="{x:Type xcad:LayoutItem}">
                            <Setter Property="Title">
                                <Setter.Value>
                                    <Binding Path="Model.FragmentTitle" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="CloseCommand" Value="{Binding Model.CloseFragmentCommand}" />
                        </Style>
                    </layoutHelpers:PanesStyleSelector.FragmentsPaneStyle>
                </layoutHelpers:PanesStyleSelector>
            </xcad:DockingManager.LayoutItemContainerStyleSelector>

            <xcad:LayoutRoot>
                <xcad:LayoutPanel Orientation="Vertical">
                    <xcad:LayoutPanel DockHeight="2*" Orientation="Horizontal">
                        <xcad:LayoutAnchorablePane Name="LeftAnchorablePane" DockWidth="250" />
                        <xcad:LayoutDocumentPane DockWidth="*" />
                    </xcad:LayoutPanel>
                    <xcad:LayoutAnchorablePane
                        Name="BottomAnchorablePane"
                        DockHeight="200"
                        DockWidth="*" />
                </xcad:LayoutPanel>
            </xcad:LayoutRoot>

        </xcad:DockingManager>

        <Border
            Grid.Row="2"
            Height="20"
            Padding="2"
            Background="{DynamicResource AccentColorBrush2}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="4*" />

                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" Text="{Binding LogServiceViewModel.HeaderString}" />
                <TextBlock
                    Grid.Column="1"
                    Text="{Binding LogServiceViewModel.LastMessageString}"
                    TextTrimming="WordEllipsis" />

            </Grid>

        </Border>

    </Grid>
</controls:MetroWindow>